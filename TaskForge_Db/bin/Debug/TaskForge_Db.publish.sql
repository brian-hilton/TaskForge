/*
Deployment script for TaskDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskDb"
:setvar DefaultFilePrefix "TaskDb"
:setvar DefaultDataPath "D:\server\MSSQL16.SQL_SERVER_2\MSSQL\DATA\"
:setvar DefaultLogPath "D:\server\MSSQL16.SQL_SERVER_2\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Table [dbo].[Jobs]...';


GO
CREATE TABLE [dbo].[Jobs] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [name]         NVARCHAR (128) NOT NULL,
    [status]       NVARCHAR (128) NOT NULL,
    [location]     NVARCHAR (128) NOT NULL,
    [user_id]      INT            NULL,
    [created_date] DATETIME2 (7)  NOT NULL,
    [updated_date] DATETIME2 (7)  NOT NULL,
    [due_date]     DATETIME2 (7)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_name]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_name]
    ON [dbo].[Jobs]([name] ASC);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_status]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_status]
    ON [dbo].[Jobs]([status] ASC);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_location]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_location]
    ON [dbo].[Jobs]([location] ASC);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_user_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_user_id]
    ON [dbo].[Jobs]([user_id] ASC);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_created_date]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_created_date]
    ON [dbo].[Jobs]([created_date] ASC);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_updated_date]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_updated_date]
    ON [dbo].[Jobs]([updated_date] ASC);


GO
PRINT N'Creating Index [dbo].[Jobs].[idx_Jobs_due_date]...';


GO
CREATE NONCLUSTERED INDEX [idx_Jobs_due_date]
    ON [dbo].[Jobs]([due_date] ASC);


GO
PRINT N'Creating Table [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [name] NVARCHAR (32) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserRoles]...';


GO
CREATE TABLE [dbo].[UserRoles] (
    [Id]      INT IDENTITY (1, 1) NOT NULL,
    [user_id] INT NOT NULL,
    [role_id] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Index [dbo].[UserRoles].[idx_UserRoles_user_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_UserRoles_user_id]
    ON [dbo].[UserRoles]([user_id] ASC);


GO
PRINT N'Creating Index [dbo].[UserRoles].[idx_UserRoles_role_id]...';


GO
CREATE NONCLUSTERED INDEX [idx_UserRoles_role_id]
    ON [dbo].[UserRoles]([role_id] ASC);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [id]           INT             IDENTITY (1, 1) NOT NULL,
    [name]         NVARCHAR (128)  NOT NULL,
    [password]     NVARCHAR (2048) NOT NULL,
    [created_date] DATETIME2 (7)   NOT NULL,
    [updated_date] DATETIME2 (7)   NOT NULL,
    [email]        NVARCHAR (128)  NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating Index [dbo].[Users].[idx_users_name]...';


GO
CREATE NONCLUSTERED INDEX [idx_users_name]
    ON [dbo].[Users]([name] ASC);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Jobs_Users]...';


GO
ALTER TABLE [dbo].[Jobs] WITH NOCHECK
    ADD CONSTRAINT [FK_Jobs_Users] FOREIGN KEY ([user_id]) REFERENCES [dbo].[Users] ([id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserRoles_Users]...';


GO
ALTER TABLE [dbo].[UserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRoles_Users] FOREIGN KEY ([user_id]) REFERENCES [dbo].[Users] ([id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserRoles_Roles]...';


GO
ALTER TABLE [dbo].[UserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_UserRoles_Roles] FOREIGN KEY ([role_id]) REFERENCES [dbo].[Roles] ([Id]);


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Jobs] WITH CHECK CHECK CONSTRAINT [FK_Jobs_Users];

ALTER TABLE [dbo].[UserRoles] WITH CHECK CHECK CONSTRAINT [FK_UserRoles_Users];

ALTER TABLE [dbo].[UserRoles] WITH CHECK CHECK CONSTRAINT [FK_UserRoles_Roles];


GO
PRINT N'Update complete.';


GO
